{
    "sourceFile": "chainlit.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748767408833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748768591479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,79 @@\n-# Welcome to Moeed's AI Assistant! 🤖✨\r\n+import os\r\n+import chainlit as cl\r\n+from dotenv import load_dotenv\r\n+from datetime import datetime  # 📅 For date/time feature\r\n+from agents import Agent, Runner, AsyncOpenAI, RunConfig, OpenAIChatCompletionsModel\r\n \r\n-## Your Personal AI Helper\r\n \r\n-This assistant can:\r\n-- Answer your questions knowledgeably\r\n-- Tell you the current date and time\r\n-- Help with various tasks\r\n+# 🔒 Load environment variables (like API key)\r\n+load_dotenv()\r\n \r\n-## Quick Start Guide\r\n+MODEL_NAME = \"gemini-2.0-flash\"\r\n+GEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\r\n \r\n-1. Type your question in the chat box\r\n-2. Use the sidebar buttons for quick actions\r\n-3. Enjoy personalized AI assistance!\r\n+# 🌐 Set up the external Gemini API client\r\n+external_client = AsyncOpenAI(\r\n+    api_key=GEMINI_API_KEY,\r\n+    base_url=\"https://generativelanguage.googleapis.com/v1beta/openai/\"\r\n+)\r\n \r\n-## Configuration\r\n+# 🤖 Define the Gemini model\r\n+model = OpenAIChatCompletionsModel(\r\n+    model=MODEL_NAME,\r\n+    openai_client=external_client\r\n+)\r\n \r\n-```python\r\n-# config\r\n-theme: light\r\n-css: |\r\n-  :root {\r\n\\ No newline at end of file\n-    --primary: #4f46e5;\r\n-    --primary-light: #6366f1;\r\n-    --primary-dark: #4338ca;\r\n-  }\r\n-  .cl-chat {\r\n-    max-width: 800px;\r\n-    margin: 0 auto;\r\n-  }\r\n-  .cl-header {\r\n-    text-align: center;\r\n-    padding: 1.5rem;\r\n-    background: linear-gradient(135deg, #4f46e5 0%, #6366f1 100%);\r\n-    color: white;\r\n-    border-radius: 0 0 10px 10px;\r\n-  }\r\n-  .cl-message {\r\n-    border-radius: 12px;\r\n-    padding: 12px 16px;\r\n-  }\n+# ⚙️ Run configuration for the model\r\n+config = RunConfig(\r\n+    model=model,\r\n+    model_provider=external_client,\r\n+    tracing_disabled=True\r\n+)\r\n+\r\n+# 🧠 Define your AI Assistant agent\r\n+my_assistant = Agent(\r\n+    name=\"AI Assistant\",\r\n+    instructions=(\r\n+        \"You are a helpful, friendly, and knowledgeable assistant. \"\r\n+        \"If the user asks for today's date or time, provide real-time information. \"\r\n+        \"Otherwise, respond helpfully to all queries.\"\r\n+    )\r\n+)\r\n+\r\n+# 👋 Welcome message when chat starts\r\n+@cl.on_chat_start\r\n+async def start():\r\n+    await cl.Message(\r\n+    content=\"🎉 **Welcome to Moeed's Assistant**\\n\\n_Type something to get started..._\"\r\n+).send()\r\n+\r\n+\r\n+# 💬 Handling user messages\r\n+@cl.on_message\r\n+async def handle_message(message: cl.Message):\r\n+    user_input = message.content.lower().strip()\r\n+\r\n+    try:\r\n+        # 🎯 Custom date/time response without using AI\r\n+        if \"date\" in user_input or \"today\" in user_input:\r\n+            today = datetime.now().strftime(\"%A, %d %B %Y\")\r\n+            await cl.Message(content=f\"📅 Today's date is: {today}\").send()\r\n+            return\r\n+\r\n+        if \"time\" in user_input:\r\n+            current_time = datetime.now().strftime(\"%I:%M %p\")\r\n+            await cl.Message(content=f\"⏰ Current time is: {current_time}\").send()\r\n+            return\r\n+\r\n+        # ✨ Typing indicator (optional)\r\n+        await cl.Message(content=\"🤖 Thinking...\").send()\r\n+\r\n+        # 🤖 Run the AI model\r\n+        result = await Runner.run(my_assistant, input=user_input, run_config=config)\r\n+\r\n+        # ✅ Show AI result\r\n+        await cl.Message(content=result.final_output).send()\r\n+\r\n+    except Exception as e:\r\n+        # ❌ Better error handling\r\n+        await cl.Message(content=f\"⚠️ An error occurred:\\n`{str(e)}`\").send()\r\n"
                },
                {
                    "date": 1748768742503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,20 @@\n-import os\r\n-import chainlit as cl\r\n-from dotenv import load_dotenv\r\n-from datetime import datetime  # 📅 For date/time feature\r\n-from agents import Agent, Runner, AsyncOpenAI, RunConfig, OpenAIChatCompletionsModel\r\n-\r\n-\r\n-# 🔒 Load environment variables (like API key)\r\n-load_dotenv()\r\n-\r\n-MODEL_NAME = \"gemini-2.0-flash\"\r\n-GEMINI_API_KEY = os.getenv(\"GEMINI_API_KEY\")\r\n-\r\n-# 🌐 Set up the external Gemini API client\r\n-external_client = AsyncOpenAI(\r\n-    api_key=GEMINI_API_KEY,\r\n-    base_url=\"https://generativelanguage.googleapis.com/v1beta/openai/\"\r\n-)\r\n-\r\n-# 🤖 Define the Gemini model\r\n-model = OpenAIChatCompletionsModel(\r\n-    model=MODEL_NAME,\r\n-    openai_client=external_client\r\n-)\r\n-\r\n-# ⚙️ Run configuration for the model\r\n-config = RunConfig(\r\n-    model=model,\r\n-    model_provider=external_client,\r\n-    tracing_disabled=True\r\n-)\r\n-\r\n-# 🧠 Define your AI Assistant agent\r\n-my_assistant = Agent(\r\n-    name=\"AI Assistant\",\r\n-    instructions=(\r\n-        \"You are a helpful, friendly, and knowledgeable assistant. \"\r\n-        \"If the user asks for today's date or time, provide real-time information. \"\r\n-        \"Otherwise, respond helpfully to all queries.\"\r\n-    )\r\n-)\r\n-\r\n-# 👋 Welcome message when chat starts\r\n-@cl.on_chat_start\r\n-async def start():\r\n-    await cl.Message(\r\n-    content=\"🎉 **Welcome to Moeed's Assistant**\\n\\n_Type something to get started..._\"\r\n-).send()\r\n-\r\n-\r\n-# 💬 Handling user messages\r\n-@cl.on_message\r\n-async def handle_message(message: cl.Message):\r\n-    user_input = message.content.lower().strip()\r\n-\r\n-    try:\r\n-        # 🎯 Custom date/time response without using AI\r\n-        if \"date\" in user_input or \"today\" in user_input:\r\n-            today = datetime.now().strftime(\"%A, %d %B %Y\")\r\n-            await cl.Message(content=f\"📅 Today's date is: {today}\").send()\r\n-            return\r\n-\r\n-        if \"time\" in user_input:\r\n-            current_time = datetime.now().strftime(\"%I:%M %p\")\r\n-            await cl.Message(content=f\"⏰ Current time is: {current_time}\").send()\r\n-            return\r\n-\r\n-        # ✨ Typing indicator (optional)\r\n-        await cl.Message(content=\"🤖 Thinking...\").send()\r\n-\r\n-        # 🤖 Run the AI model\r\n-        result = await Runner.run(my_assistant, input=user_input, run_config=config)\r\n-\r\n-        # ✅ Show AI result\r\n-        await cl.Message(content=result.final_output).send()\r\n-\r\n-    except Exception as e:\r\n-        # ❌ Better error handling\r\n-        await cl.Message(content=f\"⚠️ An error occurred:\\n`{str(e)}`\").send()\r\n+# config\r\n+theme: light\r\n+css: |\r\n+  .cl-sidebar {\r\n+    background: #f8fafc;\r\n+    width: 250px;\r\n+    padding: 1rem;\r\n+  }\r\n+  .cl-chat {\r\n+    margin-left: 250px;\r\n+  }\r\n+  .cl-message {\r\n+    margin: 0.5rem 0;\r\n+    padding: 0.8rem;\r\n+    border-radius: 8px;\r\n+  }\r\n+  .cl-button {\r\n+    margin: 0.3rem 0;\r\n+    width: 100%;\r\n+  }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748767408833,
            "name": "Commit-0",
            "content": "# Welcome to Moeed's AI Assistant! 🤖✨\r\n\r\n## Your Personal AI Helper\r\n\r\nThis assistant can:\r\n- Answer your questions knowledgeably\r\n- Tell you the current date and time\r\n- Help with various tasks\r\n\r\n## Quick Start Guide\r\n\r\n1. Type your question in the chat box\r\n2. Use the sidebar buttons for quick actions\r\n3. Enjoy personalized AI assistance!\r\n\r\n## Configuration\r\n\r\n```python\r\n# config\r\ntheme: light\r\ncss: |\r\n  :root {\r\n    --primary: #4f46e5;\r\n    --primary-light: #6366f1;\r\n    --primary-dark: #4338ca;\r\n  }\r\n  .cl-chat {\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n  }\r\n  .cl-header {\r\n    text-align: center;\r\n    padding: 1.5rem;\r\n    background: linear-gradient(135deg, #4f46e5 0%, #6366f1 100%);\r\n    color: white;\r\n    border-radius: 0 0 10px 10px;\r\n  }\r\n  .cl-message {\r\n    border-radius: 12px;\r\n    padding: 12px 16px;\r\n  }"
        }
    ]
}